#! /bin/bash

#adds totally awesome polygons to any wallpaper
#check if file is specified

usage () {
        printf "Incorrect use \n polyfy /path/to/file /path/to/clipping <options> \n Available options \n -b <number> - width of border (default: 10) \n -s <number> - size of polygon as a fraction of image height (default: 3) \n --blur <number> - amount to blur image, excluding area inside polygon (default: 0) \n -r1 <number> - rotate polygon 1 \n -r2 <number - rotate polygon 2 \n triangle|diamond|square|circle - what shape to draw (default: diamond) \n over|under|none - if the second polygon is drawn over or under the first (default: over)\n";
                exit 0;
}

triangle () {
        length=$(echo "$imageheight/${size//[^0-9-.]/}" | bc -l | awk '{print int($1+0.5)}');
        height=$(echo "$length * sqrt(3) / 2" | bc -l | awk '{print int($1+0.5)}');
        path1="polygon $((length/2)),0 $length,$height 0,$height";
        rotate1="0";
        rotate2="180";
}

square () {
        length=$(echo "$imageheight/${size//[^0-9-.]/}" | bc -l | awk '{print int($1+0.5)}');
        height=$length;
        path1="rectangle 0,0 $length,$height";
        rotate1="0";
        rotate2="45";
}

diamond () {
        square;
        rotate1="45";
}


circle () {
        length=$(echo "$imageheight/${size//[^0-9-.]/}" | bc -l | awk '{print int($1+0.5)}');
        height=$length;
        path1="circle $((length/2)),$((height/2)) $((length/2)),$borderwidth";
        rotate1="0"
        rotate2="0"
}

#default variables
bordercolor="white"
borderwidth="10"
channel="rgb"
size="3"
shape="diamond"
border2="over"
blur="0x0"

#get file, test if it exists, and get info
file="$1"; shift

if [ ! -f $file ] || [ -z $file ]; then
        usage
else
        if [ ! -f $1 ]; then
                file2="$file"
        else
                file2="$1"; shift
        fi
        filename=$(basename ${file%.*})
        format=$(basename ${file##*.})
        directory=$(dirname $file)
        imagewidth=$(identify -format "%w" $file)
        imageheight=$(identify -format "%h" $file)
fi

#get options
for i in "$@"
do
        case $1 in
                r|g|b|rg|rb|gr|br|gb|bg|rgb|rbg|brg|bgr|grb|gbr)
                        channel="${1//[^rgb]/}"
                        shift
                        ;;
                -b|--borderwidth)
                        borderwidth="${2//[^0-9]/}"
                        shift 2
                        ;;
                -s|--size)
                        size="$2"
                        shift 2
                        ;;
                --blur)
                        blur="0x$2"
                        shift 2
                        ;;
                -r1|--rotation1)
                        rotation1="$2"
                        shift 2
                        ;;
                -r2|--rotation2)
                        rotation2="$2"
                        shift 2
                        ;;
                triangle|square|diamond|circle)
                        shape="$1"
                        shift
                        ;;
                over)
                        shift
                        ;;
                under|behind)
                        border2="under"
                        shift
                        ;;
                none)
                        border2="none"
                        shift
                        ;;
                *)
                        ;;
        esac
done

$shape #calls chosen shape function

#conversion with imagemagick
convert -size "$length"x"$height" xc:none -fill black -draw "$path1" -background none -rotate $((rotation1+rotate1)) /tmp/polyfy1.png #make the matte
convert $file /tmp/polyfy1.png -gravity center -alpha set -compose Dstin -composite -channel $channel -negate -trim +repage /tmp/polyfy2.png #cut out the first polygon from the original image and negate it

if [ $borderwidth -ne 0 ]; then #check if border is not 0
        convert -size "$length"x"$height" xc:none -stroke $bordercolor -strokewidth $borderwidth -fill none -draw "$path1" -background none -rotate $((rotation1+rotate1)) /tmp/polyfy1.png #draw the border
        case $border2 in
                over)
                        convert -gravity center -background none /tmp/polyfy1.png -rotate $((rotation2+rotate2)) /tmp/polyfy1.png -compose Over -composite /tmp/polyfy1.png #combine the border and rotated border
                        convert -gravity center /tmp/polyfy1.png /tmp/polyfy2.png -compose DstOver -composite /tmp/polyfy2.png #place borders over clipping
                        ;;
                under)
                        convert -gravity center -background none /tmp/polyfy1.png -rotate $((rotation2+rotate2)) /tmp/polyfy2.png -compose Over -composite /tmp/polyfy2.png #place rotated border under clipping 
                        convert -gravity center -background none /tmp/polyfy2.png /tmp/polyfy1.png -compose Over -composite /tmp/polyfy2.png #place border over clipping
                        ;;
                none)
                        convert -gravity center /tmp/polyfy1.png /tmp/polyfy2.png -compose DstOver -composite /tmp/polyfy2.png #place border over clipping 
                        ;;
        esac
fi

convert -gravity center $file -blur $blur /tmp/polyfy2.png -compose Over -composite $directory/$filename-polyfy.$format #combine clipping and original image, apply blur

rm -f /tmp/polyfy{1,2}.png #remove temporary files

echo "file saved to "$directory"/"$filename"-polify."$format"" #output where the finished image was saved

